////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MIT License
//
// Copyright (c) 2021 fontivan
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

plugins {
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencies {
    // tbd
}

task CargoBuild(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    executable = 'cargo'
    args = ['build']
}

task CargoRun(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    executable = 'cargo'
    args = ['run']
}

task CargoUpdate(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    executable = 'cargo'
    args = ['update']
}

task CargoTest(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    environment "RUST_BACKTRACE", "1"
    executable = 'cargo'
    args = ['test']
}

task CargoBenchmark(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    executable = 'cargo'
    args = ['benchmark']
}

task CargoDoc(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    executable = 'cargo'
    args = ['doc']
}

task CargoCheck(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    executable = 'cargo'
    args = ['check']
}

task build(type: Task){
    dependsOn(project.tasks.CargoBuild)
    doFirst{
        File buildDir = new File('build')
        if (!buildDir.isDirectory()){
            buildDir.mkdirs()
        }
    }
}

task clean(type: Task){
    delete 'build/'
}

project.tasks.build {
    dependsOn(project.tasks.CargoBuild)
}

project.tasks.CargoBuild {
    dependsOn(project.tasks.CargoTest)
}

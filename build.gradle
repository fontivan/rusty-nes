////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MIT License
//
// Copyright (c) 2021 fontivan
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

plugins {
    id 'maven-publish'
    id "de.undercouch.download" version "5.1.0"
}

repositories {
    mavenCentral()
}

dependencies {
    // tbd
}

def RUST_BIN_PATH = "~/.cargo/bin"
def TEST_ROM_PATH = "${project.projectDir}/build/target/debug/"
def TEST_ROM_NAME = "nestest.nes"

task CargoBuild(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo build"]
}

task CargoRun(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo run"]
}

task CargoUpdate(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo update"]
}

task CargoTest(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    environment "RUST_BACKTRACE", "1"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo test"]
}

task CargoBenchmark(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo benchmark"]
}

task CargoDoc(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo doc"]
}

task CargoCheck(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo check"]
}

task CargoFmt(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo fmt"]
}

task CargoClippy(type: Exec) {
    environment "CARGO_TARGET_DIR", "${project.projectDir}/build/target"
    commandLine = ["bash", "-c", "${RUST_BIN_PATH}/cargo clippy"]
}

task DownloadTestRom(type: Download) {
    src 'https://github.com/christopherpow/nes-test-roms/raw/master/other/nestest.nes'
    dest "${TEST_ROM_PATH}/${TEST_ROM_NAME}"
}

task ValidateTestRom(type: Verify) {
    src new File("${TEST_ROM_PATH}", "${TEST_ROM_NAME}")
    algorithm 'SHA512'
    checksum '08b34fb1198632718af148d6c573c3a6bc49d49f3f4d63dde98daefb4c29ea5a8786022157016171bc958385481e78cc447d3b98248b4d0214dea9b9e8c213d2'
}

task build(type: Task){
    dependsOn(project.tasks.CargoBuild)
    doFirst{
        File buildDir = new File('build')
        if (!buildDir.isDirectory()){
            buildDir.mkdirs()
        }
    }
}

task clean(type: Task){
    delete 'build/'
}

project.tasks.build {
    dependsOn(project.tasks.CargoBuild)
}

project.tasks.CargoBuild {
    dependsOn(project.tasks.CargoTest)
}

project.tasks.CargoTest {
    dependsOn(project.tasks.CargoClippy)
    dependsOn(project.tasks.ValidateTestRom)
}

project.tasks.CargoClippy {
    dependsOn(project.tasks.CargoFmt)
}

project.tasks.ValidateTestRom {
    dependsOn(project.tasks.DownloadTestRom)
}
